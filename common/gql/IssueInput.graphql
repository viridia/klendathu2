# const linkedIssueInputType = new GraphQLInputObjectType({
#   name: 'LinkedIssueInput',
#   fields: {
#     to: {
#       type: new GraphQLNonNull(GraphQLInt),
#       description: 'ID of issue to which this is linked.',
#     },
#     relation: {
#       type: new GraphQLNonNull(relationType),
#       description: 'Type of the relation.',
#     },
#   },
# });
#
# const commentInputType = new GraphQLInputObjectType({
#   name: 'CommentInput',
#   fields: {
#     id: {
#       type: GraphQLInt,
#       description: 'Numeric id of this comment.',
#     },
#     author: {
#       type: GraphQLString,
#       description: 'Current owner of this issue.',
#     },
#     body: {
#       type: new GraphQLNonNull(GraphQLString),
#       description: 'Body of the comment.',
#     },
#   },
# });
#
# const customFieldInputType = new GraphQLInputObjectType({
#   name: 'CustomFieldInput',
#   fields: {
#     name: {
#       type: new GraphQLNonNull(GraphQLString),
#       description: 'Name of the custom field.',
#     },
#     value: {
#       type: new GraphQLNonNull(GraphQLString),
#       description: 'Value of the custom field.',
#     },
#   },
# });

input IssueInput {
  # Type of issue (bug, feature, task, etc.) - types defined in project template
  type: String

  # Current issue state (in progress, done) - states defined in project workflow
  state: String

  # 'One-line summary of the issue.',
  summary: String

  # Detailed description of the issue.
  description: String

  # Current owner of this issue.
  owner: String

  # Users who wish to be informed when this issue is updated.
  cc: [String!]

  # Labels associated with this issue.
  labels: [Int!]

      # linked: {
      #   type: new GraphQLList(new GraphQLNonNull(linkedIssueInputType)),
      #   description: 'List of issues linked to this one.',
      # },
      # custom: {
      #   type: new GraphQLList(new GraphQLNonNull(customFieldInputType)),
      #   description: 'List of custom fields for this issue.',
      # },
      # comments: {
      #   type: new GraphQLList(new GraphQLNonNull(commentInputType)),
      #   description: 'List of comments on this issue.',
      # },
      # attachments: {
      #   type: new GraphQLList(new GraphQLNonNull(GraphQLString)),
      #   description: 'List of attachments for this issue, as URLs.',
      # },
  # Whether this issue should be visible to non-members of the project.
  public: Boolean
}
