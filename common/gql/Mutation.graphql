type Mutation {
  # Create a new issue record.
  newIssue(
    # Id of the project the new issue is being added to.
    project: ID!,
    # Contents of the issue to be created.
    issue: IssueInput!
  ): Issue!

  # Update an existing issue record.
  newIssue(
    # Project containing the issue.
    project: ID!,
    # Id of the issue to update.
    id: Int!,
    # Updated contents of the issue
    issue: IssueInput!
  ): Issue!

  # Delete an issue record.
  deleteIssue(
    # Project containing the issue.
    project: ID!,
    # Id of the issue to delete.
    id: Int!
  ): Int!

#     addComment: {
#       description: 'Add a comment to an issue.',
#       type: new GraphQLNonNull(issueType),
#       args: {
#         project: {
#           type: new GraphQLNonNull(GraphQLID),
#           description: 'Project containing the issue.',
#         },
#         id: {
#           type: new GraphQLNonNull(GraphQLInt),
#           description: 'Id of the issue to update.',
#         },
#         comment: {
#           type: new GraphQLNonNull(GraphQLString),
#           description: 'Text of the comment to add.',
#         },
#       },
#     },

  # Create a new label.
  newLabel(
    # Project which will contain the new label.
    project: ID!
    # Contents of the label to be created.
    input: LabelInput!
  ): Label!

  # Modify an existing label.
  updateLabel(
    # Id of the project containing the label to update.
    project: ID!
    # Id of the label to update.
    id: Int!
    # Contents of the label to be updated.
    input: LabelInput!
  ): Label!

  # Delete a label.
  deleteLabel(
    # Id of the project containing the label to update.
    project: ID!
    # Id of the label to update.
    id: Int!
  ): Int!

  # Create a new project.
  newProject(input: ProjectInput!): Project!

  # Modify an existing project.
  updateProject(project: ID!, input: ProjectInput!): Project!

  # Modify an existing project.
  deleteProject(project: ID!): ID!

  # Set a user's role with respect to a project.
  setProjectRole(project: ID!, user: ID!, role: Int!): Membership

  # Set project preferences for the current user
  setProjectPrefs(
    project: ID!
    labels: [Int!]
    labelsToAdd: [Int!]
    labelsToRemove: [Int!]
    columns: [String!]
  ): ProjectPrefs

  # Project preferences: add a saved filter for the current user
  addFilter(project: ID!, name: String!, value: String!): ProjectPrefs

  # Project preferences: remove a saved filter for the current user
  removeFilter(project: ID!, name: String!): ProjectPrefs
}
